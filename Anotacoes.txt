# py_live #039

# **Sistema e API de Estacionamento com Python e Django do Zero (parte 1)**

### Requisitos do projeto **Parking Service**:

Sistema de gestão de estacionamento de veículos que deve atender os seguintes requisitos:

https://whimsical.com/parking-service-SSoifu29a1MVLAmLAPMk2a

### Funcionais

- Sistema de administração interno
    - Controle de usuários, acessos e permissões
    - Cadastros:
        - Clientes
        - Veículos
        - Vagas
        - Entradas e saídas de veículos
    - Status de vagas automático (ocupado / livre)
- API para futuras integrações
    - Cadastros completos das entidades
        - Clientes
        - Veículos
        - Vagas
        - Entradas e saídas de veículos
    - Autenticação
    - Filtros
    - Possibilidade de acesso dos clientes
        - Ver apenas seus veículos e registros
- Auto completar dados dos veículos quando informado apenas a placa
    - Verificar API de consulta
    - Rodar em paralelo
- Notificar proprietário nas entradas e saídas dos veículos
    - WhatsApp
        - EvolutionApi
    - E-mail
        - SMTP

### Não funcionais

- Dashboard do Jazzmin
- API Restfull
- Linter e pep08
- JWT token para API
- RQL para filtros
- Testes
- Serviços em containers
- EvolutionApi (serviço e integração)
- E-mail SMTP (integração e envio)
- PostgreSQL
- Celery e RabbitMQ
    - Rodar tasks de buscas de auto completar dados de veículos
- Documentação da API (swagger)

### Entregas:

- Modelagem
- Admin
- Signals (status de vagas)





OBS EM AULA PARTE 1
    
        !ORM é uma ferramenta que fornece a criacao de tabelas através de classes, a nível de código, declarando os campos do DataBase. Além disso ele auxilia na query de dados!

        --> Na Modelagem de dados para separar os apps corretamente, é importante entender a regra de negócio e as entidades fortes...
        design patterns auxiliam ( DDD - Drive Domain Design )

        Análise sobre Entidades Fortes: (Flexibilidade e Escalabilidade)

            Costumer? É fundamental no Sistema ( APP )
            Vehicle? É fundamental no Sitema (APP)
            Type Vehicle? É uma entidade Fraca, pode ser conectada ao Vehicle através de uma classe(objeto).
            Parking Spot? É fundamental no Sitemas (App)
            Parking Record? É uma Entidade "Derivada", pode ser conectada ao Parking Spot por Classe em models.
        __________________________________________________________________________________________________________________________________________

        related_name = "" --> O related_name é um parâmetro usado no Django, um framework de desenvolvimento web em Python, para definir um nome alternativo para o relacionamento reverso entre modelos.
            Ele Substitui o "_set" de uma consulta de Um campo de classe. no nosso caso no models do app costumers:
            Costumer.User.costumers.all()
            em vez de costumers_set.all()


        !dica: Não se valida dados no Banco de dados, é na camada mais próxima do usuário!
        
        --> Blank E Null TRUE por quê? O Blank e Null favorecem a praticidade do dia dia no sistema. Situacao exemplo: 
            O dia dia corrido no estacionamento, o administrador não vai ficar pedindo CPF e outros campos se o cliente tiver atrasado, imagina criar um user do cliente no horário de pico.

        --> Created at and update at são fundamentais para controle de auditoria.

        !Não se faz limpeza num DataBase, se normaliza na construcao dele...!
        
        !É essencial ter a perspectiva do funcionamento do sistema, como um caso de uso, evitando possiveis falhas ou lentidões. Tal
            exemplo seria no Cadastro de Veiculos, imagina se tivesse uma FK de um objeto Owner em dono. Seria necessário criar um owner para cadastras no sistema o carro.
            Na prática isso afetaria e muito. Estacionamento é um ambiente "vapt vupt".